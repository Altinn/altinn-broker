
using Altinn.Broker.Core.Application;
using Altinn.Broker.Core.Domain;
using Altinn.Broker.Core.Repositories;
using Altinn.Broker.Core.Services;
using Altinn.Broker.Core.Services.Enums;

using Hangfire;

using Microsoft.Extensions.Logging;

using OneOf;

namespace Altinn.Broker.Application;
public class MalwareScanningResultHandler : IHandler<ScanResultData, Task>
{
    private readonly IFileStatusRepository _fileStatusRepository;
    private readonly IIdempotencyEventRepository _idempotencyEventRepository;
    private readonly IFileRepository _fileRepository;
    private readonly IBackgroundJobClient _backgroundJobClient;
    private readonly IEventBus _eventBus;
    private readonly ILogger<MalwareScanningResultHandler> _logger;

    public MalwareScanningResultHandler(
        IFileStatusRepository fileStatusRepository,
        IFileRepository fileRepository,
        IBackgroundJobClient backgroundJobClient,
        IEventBus eventBus,
        IIdempotencyEventRepository idempotencyEventRepository,
        ILogger<MalwareScanningResultHandler> logger)
    {
        _fileStatusRepository = fileStatusRepository;
        _fileRepository = fileRepository;
        _backgroundJobClient = backgroundJobClient;
        _eventBus = eventBus;
        _idempotencyEventRepository = idempotencyEventRepository;
        _logger = logger;
    }

    public async Task<OneOf<Task, Error>> Process(ScanResultData data, CancellationToken cancellationToken)
    {
        string fileIdFromUri = data.BlobUri.Split("/").Last() ?? Guid.Empty.ToString();
        Guid fileId = Guid.Parse(fileIdFromUri);
        if (fileId == Guid.Empty)
        {
            return Errors.FileNotFound;
        }
        var file = await _fileRepository.GetFile(fileId, cancellationToken);
        if (file is null)
        {
            return Errors.FileNotFound;
        }

        if (data.ScanResultType.Equals("malicious", StringComparison.InvariantCultureIgnoreCase))
        {
            await _fileStatusRepository.InsertFileStatus(fileId, Core.Domain.Enums.FileStatus.Failed, "Malware scan failed", cancellationToken);
            await _eventBus.Publish(AltinnEventType.UploadFailed, file.ResourceId, fileIdFromUri, file.Sender.ActorExternalId, cancellationToken);
            return Task.CompletedTask;
        }
        else
        {
            await _fileStatusRepository.InsertFileStatus(fileId, Core.Domain.Enums.FileStatus.Published, cancellationToken: cancellationToken);
            await _eventBus.Publish(AltinnEventType.Published, file.ResourceId, fileIdFromUri, file.Sender.ActorExternalId, cancellationToken);
            return Task.CompletedTask;
        }
    }
}
