
using System.Text.Json;
using System.Transactions;

using Altinn.Broker.Application.ExpireFileTransfer;
using Altinn.Broker.Core.Application;
using Altinn.Broker.Core.Domain;
using Altinn.Broker.Core.Helpers;
using Altinn.Broker.Core.Repositories;
using Altinn.Broker.Core.Services;
using Altinn.Broker.Core.Services.Enums;

using Hangfire;

using Microsoft.Extensions.Logging;

using OneOf;

using Polly;

namespace Altinn.Broker.Application;
public class MalwareScanningResultHandler(
    IFileTransferStatusRepository fileTransferStatusRepository,
    IFileTransferRepository fileTransferRepository,
    IEventBus eventBus,
    ILogger<MalwareScanningResultHandler> logger,
    IBackgroundJobClient backgroundJobClient) : IHandler<ScanResultData, Task>
{
    public async Task<OneOf<Task, Error>> Process(ScanResultData data, CancellationToken cancellationToken)
    {
        string fileTransferIdFromUri = data.BlobUri.Split("/").Last() ?? Guid.Empty.ToString();
        Guid fileTransferId;
        if (!Guid.TryParse(fileTransferIdFromUri, out fileTransferId))
        {
            logger.LogError("Could not parse Guid from {fileTransferIdFromUri}", fileTransferIdFromUri);
            return Errors.FileTransferNotFound;
        }
        var fileTransfer = await fileTransferRepository.GetFileTransfer(fileTransferId, cancellationToken);
        if (fileTransfer is null)
        {
            return Errors.FileTransferNotFound;
        }

        return await TransactionWithRetriesPolicy.Execute(async (cancellationToken) =>
        {
            if (data.ScanResultType.Equals("No threats found", StringComparison.InvariantCultureIgnoreCase))
            {
                logger.LogInformation("Non-malicious result for {fileTransferId} with result type {scanResultType}", fileTransferId, data.ScanResultType);
                await fileTransferStatusRepository.InsertFileTransferStatus(fileTransferId, Core.Domain.Enums.FileTransferStatus.Published, cancellationToken: cancellationToken);
                await eventBus.Publish(AltinnEventType.Published, fileTransfer.ResourceId, fileTransferIdFromUri, fileTransfer.Sender.ActorExternalId, cancellationToken);
                foreach (var recipient in fileTransfer.RecipientCurrentStatuses)
                {
                    await eventBus.Publish(AltinnEventType.Published, fileTransfer.ResourceId, fileTransferIdFromUri, recipient.Actor.ActorExternalId, cancellationToken);
                }
            }
            else
            {
                logger.LogWarning("Suspicious scan result for file transfer {fileTransferId} with body {body}", fileTransferId, JsonSerializer.Serialize(data));
                await fileTransferStatusRepository.InsertFileTransferStatus(fileTransferId, Core.Domain.Enums.FileTransferStatus.Failed, $"Malware scan failed: {data.ScanResultType}. Extra details: " + JsonSerializer.Serialize(data.ScanResultDetails), cancellationToken);
                await eventBus.Publish(AltinnEventType.UploadFailed, fileTransfer.ResourceId, fileTransferIdFromUri, fileTransfer.Sender.ActorExternalId, cancellationToken);
                backgroundJobClient.Enqueue<ExpireFileTransferHandler>(handler => handler.Process(new ExpireFileTransferRequest
                {
                    FileTransferId = fileTransfer.FileTransferId,
                    Force = true,
                    DoNotUpdateStatus = true
                }, CancellationToken.None));
            }
            return Task.CompletedTask;
        }, logger, cancellationToken);
    }
}
