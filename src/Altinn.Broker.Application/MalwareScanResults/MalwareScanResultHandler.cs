
using System.Text.Json;

using Altinn.Broker.Core.Application;
using Altinn.Broker.Core.Domain;
using Altinn.Broker.Core.Repositories;
using Altinn.Broker.Core.Services;
using Altinn.Broker.Core.Services.Enums;

using Microsoft.Extensions.Logging;

using OneOf;

namespace Altinn.Broker.Application;
public class MalwareScanningResultHandler : IHandler<ScanResultData, Task>
{
    private readonly IFileTransferStatusRepository _fileTransferStatusRepository;
    private readonly IFileTransferRepository _fileTransferRepository;
    private readonly IEventBus _eventBus;
    private readonly ILogger<MalwareScanningResultHandler> _logger;

    public MalwareScanningResultHandler(
        IFileTransferStatusRepository fileTransferStatusRepository,
        IFileTransferRepository fileTransferRepository,
        IEventBus eventBus,
        ILogger<MalwareScanningResultHandler> logger)
    {
        _fileTransferStatusRepository = fileTransferStatusRepository;
        _fileTransferRepository = fileTransferRepository;
        _eventBus = eventBus;
        _logger = logger;
    }

    public async Task<OneOf<Task, Error>> Process(ScanResultData data, CancellationToken cancellationToken)
    {
        string fileTransferIdFromUri = data.BlobUri.Split("/").Last() ?? Guid.Empty.ToString();
        Guid fileTransferId;
        if (!Guid.TryParse(fileTransferIdFromUri, out fileTransferId))
        {
            _logger.LogError("Could not parse Guid from {fileTransferIdFromUri}", fileTransferIdFromUri);
            return Errors.FileTransferNotFound;
        }
        var fileTransfer = await _fileTransferRepository.GetFileTransfer(fileTransferId, cancellationToken);
        if (fileTransfer is null)
        {
            return Errors.FileTransferNotFound;
        }

        if (data.ScanResultType.Equals("No threats found", StringComparison.InvariantCultureIgnoreCase))
        {
            _logger.LogInformation("Non-malicious result for {fileTransferId} with result type {scanResultType}", fileTransferId, data.ScanResultType);
            await _fileTransferStatusRepository.InsertFileTransferStatus(fileTransferId, Core.Domain.Enums.FileTransferStatus.Published, cancellationToken: cancellationToken);
            await _eventBus.Publish(AltinnEventType.Published, fileTransfer.ResourceId, fileTransferIdFromUri, fileTransfer.Sender.ActorExternalId, cancellationToken);
            return Task.CompletedTask;
        }

        _logger.LogWarning("Suspicious scan result for file transfer {fileTransferId} with body {body}", fileTransferId, JsonSerializer.Serialize(data));
        await _fileTransferStatusRepository.InsertFileTransferStatus(fileTransferId, Core.Domain.Enums.FileTransferStatus.Failed, $"Malware scan failed: {data.ScanResultType}", cancellationToken);
        await _eventBus.Publish(AltinnEventType.UploadFailed, fileTransfer.ResourceId, fileTransferIdFromUri, fileTransfer.Sender.ActorExternalId, cancellationToken);
        return Task.CompletedTask;
    }
}
