using System.Net;

using Altinn.Broker.Core.Repositories;
using Altinn.Broker.Webhooks.Models;

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Altinn.Broker.Webhooks.Controllers
{
    [ApiController]
    [Route("broker/api/v1/webhooks/malwarescanresults")]
    public class MalwareScanResultsController : Controller
    {
        private readonly IFileRepository _fileRepository;

        public MalwareScanResultsController(IFileRepository fileRepository)
        {
            _fileRepository = fileRepository;
        }

        /// <summary>
        /// Initialize a file upload
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ProcessMalwareScanResults(EventMessage eventMessage)
        {
            this.Response.StatusCode = (int)HttpStatusCode.OK;
            string blobUri = eventMessage.data.blobUri;
            string result = eventMessage.data.scanResultType;
            ScanResultDetails details = eventMessage.data.scanResultDetails;
            
            Guid fileId = _fileRepository.GetFileIdByBlobUriAsync(blobUri).Result;
            
            if(fileId == Guid.Empty)
            {
                return NotFound();
            }

            if(result.Equals("malicious", StringComparison.InvariantCultureIgnoreCase))
            {
                _fileRepository.InsertFileStatus(fileId, Core.Domain.Enums.FileStatus.Failed);
                return Ok();
            }
            else
            {
                _fileRepository.InsertFileStatus(fileId, Core.Domain.Enums.FileStatus.Published);
                return Ok();
            }
        }
    }
}