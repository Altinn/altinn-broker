using System.Net;
using System.Text.Json.Serialization;

using Altinn.Broker.Core.Repositories;
using Altinn.Broker.Webhooks.Models;

using Azure.Messaging.EventGrid;
using Azure.Messaging.EventGrid.SystemEvents;

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

using Newtonsoft.Json;

namespace Altinn.Broker.Webhooks.Controllers
{
    [ApiController]
    [Route("broker/api/v1/webhooks/malwarescanresults")]
    public class MalwareScanResultsController : Controller
    {
        private readonly IFileRepository _fileRepository;
        private readonly IFileStatusRepository _fileStatusRepository;

        public MalwareScanResultsController(IFileRepository fileRepository, IFileStatusRepository fileStatusRepository)
        {
            _fileRepository = fileRepository;
            _fileStatusRepository = fileStatusRepository;
        }

        [HttpPost]
        public ActionResult ProcessMalwareScanResult()
        {
            BinaryData events = BinaryData.FromStreamAsync(this.Request.Body).Result;
            EventGridEvent[] eventGridEvents = EventGridEvent.ParseMany(events);
            foreach (EventGridEvent eventGridEvent in eventGridEvents)
            {
                if (eventGridEvent.TryGetSystemEventData(out object eventData))
                {
                    if (eventData is SubscriptionValidationEventData subscriptionValidationEventData)
                    {
                        // TODO: validate that eventGridEvent WebHook subscription is actually from an Altinn Azure Defender EventGrid
                        var responseData = new
                        {
                            ValidationResponse = subscriptionValidationEventData.ValidationCode
                        };
                        return new OkObjectResult(responseData);
                    }
                }
                else if (eventGridEvent.EventType == "Microsoft.Security.MalwareScanningResult")
                {
                    string jsonString = eventGridEvent.Data.ToString();
                    ScanResultData result = JsonConvert.DeserializeObject<ScanResultData>(jsonString);
                    string fileIdFromUri = result.BlobUri.Split("/")
                                                         .Last() ?? Guid.Empty.ToString();
                    Guid fileId = Guid.Parse(fileIdFromUri);
                    if (fileId == Guid.Empty)
                    {
                        return NotFound();
                    }

                    if (result.ScanResultType.Equals("malicious", StringComparison.InvariantCultureIgnoreCase))
                    {
                        _fileStatusRepository.InsertFileStatus(fileId, Core.Domain.Enums.FileStatus.Failed);
                        return Ok();
                    }
                    else
                    {
                        _fileStatusRepository.InsertFileStatus(fileId, Core.Domain.Enums.FileStatus.Published);
                        return Ok();
                    }
                }
            }

            return Ok();
        }
    }
}
