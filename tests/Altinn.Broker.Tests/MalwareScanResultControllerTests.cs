using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;

using Altinn.Broker.API.Models;
using Altinn.Broker.Core.Models;
using Altinn.Broker.Enums;
using Altinn.Broker.Models;
using Altinn.Broker.Tests.Factories;
using Altinn.Broker.Tests.Helpers;

using Xunit;

namespace Altinn.Broker.Tests;
public class MalwareScanResultControllerTests : IClassFixture<CustomWebApplicationFactory>
{
    private readonly CustomWebApplicationFactory _factory;
    private readonly HttpClient _senderClient;
    private readonly JsonSerializerOptions _responseSerializerOptions;
    private readonly HttpClient _webhookClient;

    public MalwareScanResultControllerTests(CustomWebApplicationFactory factory)
    {
        _factory = factory;
        _senderClient = _factory.CreateClientWithAuthorization(TestConstants.DUMMY_SENDER_TOKEN);
        _webhookClient = factory.CreateClient();
        _responseSerializerOptions = new JsonSerializerOptions(new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        });
        _responseSerializerOptions.Converters.Add(new System.Text.Json.Serialization.JsonStringEnumConverter());
    }

    [Fact]
    public async Task MalwareScanFoundNoThreat_Success()
    {
        // Initialize
        var fileId = await UploadAndCheckFileTransfer();
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_NoThreatFound.json", fileId);
        await SendMalvareScanResult(jsonBody);
        // Get Scanned status
        var scannedFile = await GetFileTransferWithNullAndOkCheck(fileId);
        Assert.True(scannedFile.FileTransferStatus == FileTransferStatusExt.Published);
        Assert.True(scannedFile.FileTransferStatusText == "Ready for download");
    }

    [Fact]
    public async Task MalwareScanFoundMaliciousSignature_Success()
    {
        // Initialize
        var fileTransferId = await UploadAndCheckFileTransfer();
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_Malicious.json", fileTransferId);
        await SendMalvareScanResult(jsonBody);

        // Get scanned status
        var scannedFile = await GetFileTransferWithNullAndOkCheck(fileTransferId);
        Assert.True(scannedFile.FileTransferStatus == FileTransferStatusExt.Failed);
    }

    [Fact]
    public async Task MalwareScanWebhookSubscription_OK()
    {
        // Webhook
        string jsonBody = File.ReadAllText("Data/WebHookSubscriptionValidationTest.json");
        var result = await SendMalvareScanResult(jsonBody);
        string rs = await result.Content.ReadAsStringAsync();
        Assert.Equal("{\"validationResponse\":\"512d38b6-c7b8-40c8-89fe-f46f9e9622b6\"}", rs);
    }


    private async Task<string> UploadAndCheckFileTransfer()
    {
        var initializeFileTransferResponse = await _senderClient.PostAsJsonAsync("broker/api/v1/filetransfer", FileTransferInitializeExtTestFactory.BasicFileTransfer());
        Assert.True(initializeFileTransferResponse.IsSuccessStatusCode, $"The request failed with status code {initializeFileTransferResponse.StatusCode}. Error message: {await initializeFileTransferResponse.Content.ReadAsStringAsync()}");
        var fileTransferResponse = await initializeFileTransferResponse.Content.ReadFromJsonAsync<FileTransferInitializeResponseExt>();
        var fileTransferId = fileTransferResponse.FileTransferId.ToString();
        
        // Upload
        var uploadedFileBytes = Encoding.UTF8.GetBytes("This is the contents of the uploaded file");
        using (var content = new ByteArrayContent(uploadedFileBytes))
        {
            content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            var uploadResponse = await _senderClient.PostAsync($"broker/api/v1/filetransfer/{fileTransferId}/upload", content);
            Assert.True(uploadResponse.IsSuccessStatusCode);
        }
        var fileTransferAfterUpload = await GetFileTransferWithNullAndOkCheck(fileTransferId);
        Assert.True(fileTransferAfterUpload.FileTransferStatus == FileTransferStatusExt.Published); // When running integration test this happens instantly as of now.
        return fileTransferId;
    }
    private string GetMalwareScanResultJson(string filePath, string fileId)
    {
        string jsonBody = File.ReadAllText(filePath);
        var randomizedEtagId = Guid.NewGuid().ToString();
        jsonBody = jsonBody.Replace("--FILEID--", fileId);
        jsonBody = jsonBody.Replace("--ETAGID--", randomizedEtagId.ToString());
        return jsonBody;
    }
    private async Task<FileTransferOverviewExt> GetFileTransferWithNullAndOkCheck(string fileTransferId)
    {
        var fileTransfer = await _senderClient.GetFromJsonAsync<FileTransferOverviewExt>($"broker/api/v1/filetransfer/{fileTransferId}", _responseSerializerOptions);
        Assert.NotNull(fileTransfer);
        return fileTransfer;
    }
    private async Task<HttpResponseMessage> SendMalvareScanResult(string jsonBody)
    {
        var result = await _webhookClient.PostAsync("broker/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));
        Assert.True(result.IsSuccessStatusCode, $"The request failed with status code {result.StatusCode}. Error message: {await result.Content.ReadAsStringAsync()}");
        return result;
    }
}
