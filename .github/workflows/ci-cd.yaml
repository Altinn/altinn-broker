name: CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
    - "Test/**" # ignore changes to tests

jobs:
  test:	
    name: QA	
    uses: ./.github/workflows/test-application.yml	

  deploy-test:
    name: Internal test
    uses: ./.github/workflows/deploy-to-environment.yml
    if: always() && !failure() && !cancelled() 
    needs: [test]
    permissions: 
      id-token: write
      contents: read
      packages: write
    secrets: inherit
    with:
      environment: test

  deploy-staging:
    name: Staging
    needs: [ 
      deploy-test,
    ]
    uses: ./.github/workflows/deploy-to-environment.yml
    if: (!failure() && !cancelled()) 
    permissions: 
      id-token: write
      contents: read
      packages: write
    secrets: inherit
    with:
      environment: staging

  deploy-production:
    name: Production
    needs: [
      deploy-staging,
    ]
    uses: ./.github/workflows/deploy-to-environment.yml
    if: (!failure() && !cancelled())
    permissions: 
      id-token: write
      contents: read
      packages: write
    secrets: inherit
    with:
      environment: production

  release-to-git:  
    name: Release to git
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: ${{ !failure() && !cancelled()}}
    permissions: 
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if version changed
        id: check-version
        run: |
          CURRENT_VERSION=$(cat version.txt)
          LATEST_TAG=$(git tag | sort --version-sort | tail -n1)
          if [ "$CURRENT_VERSION" != "$LATEST_TAG" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        if: steps.check-version.outputs.version_changed == 'true'
        uses: ./.github/actions/release-to-git
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: No release needed
        if: steps.check-version.outputs.version_changed == 'false'
        run: |
          echo "âœ… No release needed - version ${{ steps.check-version.outputs.current_version }} already exists"
          echo "Current version: ${{ steps.check-version.outputs.current_version }}"
          echo "Latest tag: ${{ steps.check-version.outputs.latest_tag }}"