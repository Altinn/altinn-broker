using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;

using Altinn.Broker.Core.Models;
using Altinn.Broker.Enums;
using Altinn.Broker.Models;
using Altinn.Broker.Tests.Factories;
using Altinn.Broker.Tests.Helpers;

using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.Identity.Web;

using Xunit;

namespace Altinn.Broker.Tests;
public class MalwareScanReulstControllerTests : IClassFixture<CustomWebApplicationFactory>
{
    private readonly WebApplicationFactory<Program> _factory;
    private readonly HttpClient _senderClient;
    private readonly HttpClient _recipientClient;
    private readonly JsonSerializerOptions _responseSerializerOptions;
    private readonly HttpClient _webhookClient;

    /**
     * Inject a mock bearer configuration that does not verify anything. 
     * Generate our own JWT with correct scope, expiry and issuer. 
     * Set it as default request header
     * */

    public MalwareScanReulstControllerTests(CustomWebApplicationFactory factory)
    {
        _factory = factory;
        _senderClient = factory.CreateClient();
        _senderClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TestConstants.DUMMY_SENDER_TOKEN);
        _recipientClient = factory.CreateClient();
        _recipientClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TestConstants.DUMMY_RECIPIENT_TOKEN);
        _webhookClient = factory.CreateClient();

        _responseSerializerOptions = new JsonSerializerOptions(new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        });
        _responseSerializerOptions.Converters.Add(new System.Text.Json.Serialization.JsonStringEnumConverter());
    }

    [Fact]
    public async Task MalwareScanFoundNoThreat_Success()
    {
        // Initialize
        var initializeFileResponse = await _senderClient.PostAsJsonAsync("broker/api/v1/file", FileInitializeExtTestFactory.BasicFile());
        Assert.Equal(System.Net.HttpStatusCode.OK, initializeFileResponse.StatusCode);
        var fileId = await initializeFileResponse.Content.ReadAsStringAsync();

        // Upload
        var uploadedFileBytes = Encoding.UTF8.GetBytes("This is the contents of the uploaded file");
        using (var content = new ByteArrayContent(uploadedFileBytes))
        {
            content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            var uploadResponse = await _senderClient.PostAsync($"broker/api/v1/file/{fileId}/upload", content);
            Assert.True(uploadResponse.IsSuccessStatusCode);
        }

        // Webhook
        string jsonBody = "{\"data\":{\"blobUri\":\"https://aitest0192991825827sa.blob.core.windows.net/brokerfiles/" + fileId + "\",\"correlationId\":\"21c48159-e5ef-4376-ba96-4f8d6e0f1c7f\",\"eTag\":\"0x8DBF7C550ADB6E7\",\"scanFinishedTimeUtc\":\"2023-12-08T08:11:44.9457492Z\",\"scanResultDetails\":null,\"scanResultType\":\"No threats found\"},\"dataVersion\":\"1.0\",\"eventTime\":\"2023-12-08T08:11:44.9464641Z\",\"eventType\":\"Microsoft.Security.MalwareScanningResult\",\"id\":\"21c48159-e5ef-4376-ba96-4f8d6e0f1c7f\",\"metadataVersion\":\"1\",\"subject\":\"storageAccounts/aitest0192991825827sa/containers/brokerfiles/blobs/emptydoctest.txt\",\"topic\":\"/subscriptions/81cc3a6b-dfdf-49c7-96f0-3efddb159356/resourceGroups/serviceowner-test-0192-991825827-rg/providers/Microsoft.EventGrid/topics/test-broker-defenderresults\"}";
        var result = await _webhookClient.PostAsync("broker/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));

        Assert.Equal(System.Net.HttpStatusCode.OK, result.StatusCode);

        // Get Scanned status
        var scannedFile = await _senderClient.GetFromJsonAsync<FileOverviewExt>($"broker/api/v1/file/{fileId}", _responseSerializerOptions);

        Assert.NotNull(scannedFile);
        Assert.True(scannedFile.FileStatus == FileStatusExt.Published);
    }

    [Fact]
    public async Task MalwareScanFoundMaliciousSignature_Success()
    {
        // Initialize
        var initializeFileResponse = await _senderClient.PostAsJsonAsync("broker/api/v1/file", FileInitializeExtTestFactory.BasicFile());
        Assert.Equal(System.Net.HttpStatusCode.OK, initializeFileResponse.StatusCode);
        var fileId = await initializeFileResponse.Content.ReadAsStringAsync();

        // Upload
        var uploadedFileBytes = Encoding.UTF8.GetBytes("This is the contents of the uploaded file");
        using (var content = new ByteArrayContent(uploadedFileBytes))
        {
            content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            var uploadResponse = await _senderClient.PostAsync($"broker/api/v1/file/{fileId}/upload", content);
            Assert.True(uploadResponse.IsSuccessStatusCode);
        }

        var fileAfterUpload = await _senderClient.GetFromJsonAsync<FileOverviewExt>($"broker/api/v1/file/{fileId}", _responseSerializerOptions);
        Assert.NotNull(fileAfterUpload);
        Assert.True(fileAfterUpload.FileStatus == FileStatusExt.Published); // When running integration test this happens instantly as of now.

        // Webhook
        string jsonBody = "{\"data\":{\"blobUri\":\"https://aitest0192991825827sa.blob.core.windows.net/brokerfiles/" + fileId + "\",\"correlationId\":\"2ee9f258-c96a-4982-9e6e-16b8485d71da\",\"eTag\":\"0x8DBF7C56A86430D\",\"scanFinishedTimeUtc\":\"2023-12-08T08:12:31.9933275Z\",\"scanResultDetails\":{\"malwareNamesFound\":[\"Virus:DOS/EICAR_Test_File\"],\"sha256\":\"275A021BBFB6489E54D471899F7DB9D1663FC695EC2FE2A2C4538AABF651FD0F\"},\"scanResultType\":\"Malicious\"},\"dataVersion\":\"1.0\",\"eventTime\":\"2023-12-08T08:12:31.9939079Z\",\"eventType\":\"Microsoft.Security.MalwareScanningResult\",\"id\":\"2ee9f258-c96a-4982-9e6e-16b8485d71da\",\"metadataVersion\":\"1\",\"subject\":\"storageAccounts/aitest0192991825827sa/containers/brokerfiles/blobs/EICAR antivirus test file.txt\",\"topic\":\"/subscriptions/81cc3a6b-dfdf-49c7-96f0-3efddb159356/resourceGroups/serviceowner-test-0192-991825827-rg/providers/Microsoft.EventGrid/topics/test-broker-defenderresults\"}";
        var result = await _webhookClient.PostAsync("broker/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));

        Assert.Equal(System.Net.HttpStatusCode.OK, result.StatusCode);

        // Get scanned status
        var scannedFile = await _senderClient.GetFromJsonAsync<FileOverviewExt>($"broker/api/v1/file/{fileId}", _responseSerializerOptions);

        Assert.NotNull(scannedFile);
        Assert.True(scannedFile.FileStatus == FileStatusExt.Failed);
    }

    [Fact]
    public async Task MalwareScanWebhookSubscription_OK()
    {
        // Webhook
        string jsonBody = "[{\"id\":\"2d1781af-3a4c-4d7c-bd0c-e34b19da4e66\",\"topic\":\"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\"subject\":\"\",\"data\":{\"validationCode\":\"512d38b6-c7b8-40c8-89fe-f46f9e9622b6\",\"validationUrl\":\"https://www.contoso.com/\"},\"eventType\":\"Microsoft.EventGrid.SubscriptionValidationEvent\",\"eventTime\":\"2018-01-25T22:12:19.4556811Z\",\"metadataVersion\":\"1\",\"dataVersion\":\"1\"}]";
        var result = await _webhookClient.PostAsync("broker/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));
        string rs = result.Content.ReadAsStringAsync().Result;
        Assert.Equal(System.Net.HttpStatusCode.OK, result.StatusCode);
        Assert.Equal("{\"validationResponse\":\"512d38b6-c7b8-40c8-89fe-f46f9e9622b6\"}", rs);
    }
}
