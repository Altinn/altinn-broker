using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;

using Altinn.Broker.Core.Models;
using Altinn.Broker.Enums;
using Altinn.Broker.Models;
using Altinn.Broker.Tests.Factories;
using Altinn.Broker.Tests.Helpers;

using Microsoft.AspNetCore.TestHost;

using Xunit;

namespace Altinn.Broker.Tests;
public class MalwareScanResultControllerTests : IClassFixture<CustomWebApplicationFactory>
{
    private readonly CustomWebApplicationFactory _factory;
    private readonly HttpClient _senderClient;
    private readonly JsonSerializerOptions _responseSerializerOptions;
    private readonly HttpClient _webhookClient;

    public MalwareScanResultControllerTests(CustomWebApplicationFactory factory)
    {
        _factory = factory;
        _senderClient = _factory.CreateClientWithAuthorization(TestConstants.DUMMY_SENDER_TOKEN);
        _webhookClient = factory.CreateClient();
        _responseSerializerOptions = new JsonSerializerOptions(new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        });
        _responseSerializerOptions.Converters.Add(new System.Text.Json.Serialization.JsonStringEnumConverter());
    }

    [Fact]
    public async Task MalwareScanFoundNoThreat_Success()
    {
        // Initialize
        var fileId = await UploadAndCheckFile();
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_NoThreatFound.json", fileId);
        await SendMalvareScanResult(jsonBody);
        // Get Scanned status
        var scannedFile = await GetFileWithNullAndOkCheck(fileId);
        Assert.True(scannedFile.FileStatus == FileStatusExt.Published);
        Assert.True(scannedFile.FileStatusText == "Ready for download");
    }

    [Fact]
    public async Task MalwareScanFoundMaliciousSignature_Success()
    {
        // Initialize
        var fileId = await UploadAndCheckFile();
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_Malicious.json", fileId);
        await SendMalvareScanResult(jsonBody);

        // Get scanned status
        var scannedFile = await GetFileWithNullAndOkCheck(fileId);
        Assert.True(scannedFile.FileStatus == FileStatusExt.Failed);
        Assert.True(scannedFile.FileStatusText == "Malware scan failed");
    }
    [Fact]
    public async Task MalwareScanCreatedOneChangeOnDuplicateEvents()
    {
        // Initialize
        var fileId = await UploadAndCheckFile();
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_NoThreatFound.json", fileId);

        // Send twice to check if it creates only one change
        var scannedFileDetailsBeforeScan = await _senderClient.GetFromJsonAsync<FileStatusDetailsExt>($"broker/api/v1/file/{fileId}/details", _responseSerializerOptions);
        await SendMalvareScanResult(jsonBody);
        await SendMalvareScanResult(jsonBody);
        var scannedFileDetailsAfterScan = await _senderClient.GetFromJsonAsync<FileStatusDetailsExt>($"broker/api/v1/file/{fileId}/details", _responseSerializerOptions);

        Assert.NotNull(scannedFileDetailsBeforeScan);
        Assert.NotNull(scannedFileDetailsAfterScan);
        Assert.True(scannedFileDetailsBeforeScan.FileStatusHistory.Count + 1 == scannedFileDetailsAfterScan.FileStatusHistory.Count);
    }

    [Fact]
    public async Task MalwareScanWebhookSubscription_OK()
    {
        // Webhook
        string jsonBody = File.ReadAllText("Data/WebHookSubscriptionValidationTest.json");
        var result = await SendMalvareScanResult(jsonBody);
        string rs = await result.Content.ReadAsStringAsync();
        Assert.Equal("{\"validationResponse\":\"512d38b6-c7b8-40c8-89fe-f46f9e9622b6\"}", rs);
    }


    private async Task<string> UploadAndCheckFile()
    {
        var initializeFileResponse = await _senderClient.PostAsJsonAsync("broker/api/v1/file", FileInitializeExtTestFactory.BasicFile());
        Assert.Equal(System.Net.HttpStatusCode.OK, initializeFileResponse.StatusCode);
        var fileId = await initializeFileResponse.Content.ReadAsStringAsync();

        // Upload
        var uploadedFileBytes = Encoding.UTF8.GetBytes("This is the contents of the uploaded file");
        using (var content = new ByteArrayContent(uploadedFileBytes))
        {
            content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            var uploadResponse = await _senderClient.PostAsync($"broker/api/v1/file/{fileId}/upload", content);
            Assert.True(uploadResponse.IsSuccessStatusCode);
        }
        var fileAfterUpload = await GetFileWithNullAndOkCheck(fileId);
        Assert.True(fileAfterUpload.FileStatus == FileStatusExt.Published); // When running integration test this happens instantly as of now.
        return fileId;
    }
    private string GetMalwareScanResultJson(string filePath, string fileId)
    {
        string jsonBody = File.ReadAllText(filePath);
        var randomizedCorrelationId = Guid.NewGuid().ToString();
        jsonBody = jsonBody.Replace("--FILEID--", fileId);
        jsonBody = jsonBody.Replace("--CORRELATIONID--", randomizedCorrelationId);
        return jsonBody;
    }
    private async Task<FileOverviewExt> GetFileWithNullAndOkCheck(string fileId)
    {
        var file = await _senderClient.GetFromJsonAsync<FileOverviewExt>($"broker/api/v1/file/{fileId}", _responseSerializerOptions);
        Assert.NotNull(file);
        return file;
    }
    private async Task<HttpResponseMessage> SendMalvareScanResult(string jsonBody)
    {
        var result = await _webhookClient.PostAsync("broker/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));
        Assert.Equal(System.Net.HttpStatusCode.OK, result.StatusCode);
        return result;
    }
}
