using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;

using Altinn.Broker.Core.Models;
using Altinn.Broker.Enums;
using Altinn.Broker.Models;
using Altinn.Broker.Tests.Helpers;

using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.Identity.Web;

using Xunit;

namespace Altinn.Broker.Tests;
public class MalwareScanReulstControllerTests : IClassFixture<CustomWebApplicationFactory>
{
    private readonly WebApplicationFactory<Program> _factory;
    private readonly HttpClient _senderClient;
    private readonly HttpClient _recipientClient;
    private readonly JsonSerializerOptions _responseSerializerOptions;

    /**
     * Inject a mock bearer configuration that does not verify anything. 
     * Generate our own JWT with correct scope, expiry and issuer. 
     * Set it as default request header
     * */

    public MalwareScanReulstControllerTests(CustomWebApplicationFactory factory)
    {
        _factory = factory;
        _senderClient = factory.CreateClient();
        _senderClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TestConstants.DUMMY_SENDER_TOKEN);
        _recipientClient = factory.CreateClient();
        _recipientClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TestConstants.DUMMY_RECIPIENT_TOKEN);

        _responseSerializerOptions = new JsonSerializerOptions(new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        });
        _responseSerializerOptions.Converters.Add(new System.Text.Json.Serialization.JsonStringEnumConverter());
    }

    [Fact]
    public async Task MalwareScanFoundNoThreat()
    {
        string jsonBody = File.ReadAllText(@"..Test\Altinn.Broker.Tests\Data\MalwareScanResult_FoundNoThreat.json");
        string fileId = "ed76ce89-3768-481a-bca1-4e4262d9098b";
        var result = await _senderClient.PostAsync("broker/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));
        
        var scannedFile = await _senderClient.GetFromJsonAsync<FileOverviewExt>($"broker/api/v1/file/{fileId}", _responseSerializerOptions);

        Assert.NotNull(scannedFile);
        Assert.True(scannedFile.FileStatus == FileStatusExt.Published);
    }
    
    [Fact]
    public async Task MalwareScanFoundMaliciousSignature()
    {
        string jsonBody = File.ReadAllText(@"..Test\Altinn.Broker.Tests\Data\MalwareScanResult_Malicious.json");
        string fileId = "ed76ce89-3768-481a-bca1-4e4262d9098b";
        var result = await _senderClient.PostAsync("broker/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));
        
        var scannedFile = await _senderClient.GetFromJsonAsync<FileOverviewExt>($"broker/api/v1/file/{fileId}", _responseSerializerOptions);

        Assert.NotNull(scannedFile);
        Assert.True(scannedFile.FileStatus == FileStatusExt.Failed);
    }
}
